#!/usr/bin/env bash
# Script para probar todas las funcionalidades de ContenidosX
# Usage: ./scripts/test_complete_functionality.sh

set -euo pipefail

echo "üß™ TESTING COMPLETO DE FUNCIONALIDADES"
echo "======================================"
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir con color
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# URLs de las aplicaciones
STAGING_URL="https://contenidosx-app-stg.fly.dev"
PROD_URL="https://contenidosx-app-prod.fly.dev"

# Funci√≥n para probar endpoint
test_endpoint() {
    local url="$1"
    local description="$2"
    local expected_status="${3:-200}"
    
    echo "Probando: $description"
    echo "URL: $url"
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    
    if [ "$response" = "$expected_status" ]; then
        print_status "$description - Status: $response"
    else
        print_warning "$description - Status: $response (esperado: $expected_status)"
    fi
    echo ""
}

# Funci√≥n para probar endpoint con POST
test_post_endpoint() {
    local url="$1"
    local description="$2"
    local data="$3"
    local expected_status="${4:-200}"
    
    echo "Probando: $description"
    echo "URL: $url"
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$data" "$url")
    
    if [ "$response" = "$expected_status" ]; then
        print_status "$description - Status: $response"
    else
        print_warning "$description - Status: $response (esperado: $expected_status)"
    fi
    echo ""
}

# Probar endpoints b√°sicos
test_basic_endpoints() {
    echo "üåê PROBANDO ENDPOINTS B√ÅSICOS"
    echo "============================="
    
    # Staging
    echo "üìã STAGING:"
    test_endpoint "$STAGING_URL" "P√°gina principal"
    test_endpoint "$STAGING_URL/feed" "Feed de contenido"
    test_endpoint "$STAGING_URL/explore" "Explorar creadores"
    test_endpoint "$STAGING_URL/auth" "P√°gina de autenticaci√≥n"
    test_endpoint "$STAGING_URL/messages" "Mensajes"
    
    # Producci√≥n
    echo "üìã PRODUCCI√ìN:"
    test_endpoint "$PROD_URL" "P√°gina principal"
    test_endpoint "$PROD_URL/feed" "Feed de contenido"
    test_endpoint "$PROD_URL/explore" "Explorar creadores"
    test_endpoint "$PROD_URL/auth" "P√°gina de autenticaci√≥n"
    test_endpoint "$PROD_URL/messages" "Mensajes"
}

# Probar endpoints de API
test_api_endpoints() {
    echo "üîå PROBANDO ENDPOINTS DE API"
    echo "============================"
    
    # Staging
    echo "üìã STAGING API:"
    test_endpoint "$STAGING_URL/api/health" "Health check" "200"
    test_endpoint "$STAGING_URL/api/webhooks/stripe" "Stripe webhook" "405"  # Method not allowed para GET
    test_post_endpoint "$STAGING_URL/api/webhooks/stripe" "Stripe webhook POST" '{"test": "data"}' "400"  # Bad request sin datos v√°lidos
    
    # Producci√≥n
    echo "üìã PRODUCCI√ìN API:"
    test_endpoint "$PROD_URL/api/health" "Health check" "200"
    test_endpoint "$PROD_URL/api/webhooks/stripe" "Stripe webhook" "405"  # Method not allowed para GET
    test_post_endpoint "$PROD_URL/api/webhooks/stripe" "Stripe webhook POST" '{"test": "data"}' "400"  # Bad request sin datos v√°lidos
}

# Probar funcionalidades de autenticaci√≥n
test_auth_functionality() {
    echo "üîê PROBANDO FUNCIONALIDADES DE AUTENTICACI√ìN"
    echo "============================================"
    
    # Probar endpoints de auth
    echo "üìã Endpoints de autenticaci√≥n:"
    test_endpoint "$STAGING_URL/auth/signin" "Sign in"
    test_endpoint "$STAGING_URL/auth/signup" "Sign up"
    test_endpoint "$STAGING_URL/auth/callback" "Auth callback"
    
    test_endpoint "$PROD_URL/auth/signin" "Sign in"
    test_endpoint "$PROD_URL/auth/signup" "Sign up"
    test_endpoint "$PROD_URL/auth/callback" "Auth callback"
}

# Probar funcionalidades de contenido
test_content_functionality() {
    echo "üìù PROBANDO FUNCIONALIDADES DE CONTENIDO"
    echo "========================================"
    
    # Probar endpoints de contenido
    echo "üìã Endpoints de contenido:"
    test_endpoint "$STAGING_URL/api/posts" "Posts API"
    test_endpoint "$STAGING_URL/api/creators" "Creators API"
    test_endpoint "$STAGING_URL/api/subscriptions" "Subscriptions API"
    
    test_endpoint "$PROD_URL/api/posts" "Posts API"
    test_endpoint "$PROD_URL/api/creators" "Creators API"
    test_endpoint "$PROD_URL/api/subscriptions" "Subscriptions API"
}

# Probar funcionalidades de Stripe
test_stripe_functionality() {
    echo "üí≥ PROBANDO FUNCIONALIDADES DE STRIPE"
    echo "===================================="
    
    # Probar endpoints de Stripe
    echo "üìã Endpoints de Stripe:"
    test_endpoint "$STAGING_URL/api/stripe/create-checkout" "Create checkout session" "405"  # Method not allowed para GET
    test_endpoint "$STAGING_URL/api/stripe/create-portal" "Create portal session" "405"  # Method not allowed para GET
    
    test_endpoint "$PROD_URL/api/stripe/create-checkout" "Create checkout session" "405"  # Method not allowed para GET
    test_endpoint "$PROD_URL/api/stripe/create-portal" "Create portal session" "405"  # Method not allowed para GET
}

# Probar funcionalidades de email
test_email_functionality() {
    echo "üìß PROBANDO FUNCIONALIDADES DE EMAIL"
    echo "===================================="
    
    # Probar endpoints de email
    echo "üìã Endpoints de email:"
    test_endpoint "$STAGING_URL/api/send-email" "Send email" "405"  # Method not allowed para GET
    test_endpoint "$PROD_URL/api/send-email" "Send email" "405"  # Method not allowed para GET
}

# Verificar configuraci√≥n de secrets
check_secrets_configuration() {
    echo "üîë VERIFICANDO CONFIGURACI√ìN DE SECRETS"
    echo "======================================="
    
    # Verificar que las aplicaciones est√°n funcionando
    if curl -s -f "$STAGING_URL" > /dev/null; then
        print_status "Staging app est√° funcionando"
    else
        print_error "Staging app no est√° funcionando"
    fi
    
    if curl -s -f "$PROD_URL" > /dev/null; then
        print_status "Producci√≥n app est√° funcionando"
    else
        print_error "Producci√≥n app no est√° funcionando"
    fi
}

# Mostrar resumen de testing
show_testing_summary() {
    echo ""
    echo "üìä RESUMEN DE TESTING"
    echo "===================="
    
    echo "‚úÖ Funcionalidades probadas:"
    echo "‚Ä¢ Endpoints b√°sicos (p√°ginas principales)"
    echo "‚Ä¢ Endpoints de API"
    echo "‚Ä¢ Funcionalidades de autenticaci√≥n"
    echo "‚Ä¢ Funcionalidades de contenido"
    echo "‚Ä¢ Funcionalidades de Stripe"
    echo "‚Ä¢ Funcionalidades de email"
    echo "‚Ä¢ Configuraci√≥n de secrets"
    
    echo ""
    echo "üîß Pr√≥ximos pasos para testing manual:"
    echo "‚Ä¢ Registro de usuarios"
    echo "‚Ä¢ Login/logout"
    echo "‚Ä¢ Creaci√≥n de perfiles de creador"
    echo "‚Ä¢ Publicaci√≥n de contenido"
    echo "‚Ä¢ Suscripciones de Stripe"
    echo "‚Ä¢ Paywall funcionando"
    echo "‚Ä¢ Env√≠o de emails"
    
    echo ""
    echo "üåê URLs para testing manual:"
    echo "‚Ä¢ Staging: $STAGING_URL"
    echo "‚Ä¢ Producci√≥n: $PROD_URL"
}

# Funci√≥n principal
main() {
    echo "Iniciando testing completo de funcionalidades..."
    echo ""
    
    # Ejecutar todas las pruebas
    test_basic_endpoints
    test_api_endpoints
    test_auth_functionality
    test_content_functionality
    test_stripe_functionality
    test_email_functionality
    check_secrets_configuration
    
    # Mostrar resumen
    show_testing_summary
    
    echo ""
    echo "üéâ TESTING COMPLETADO"
    echo "===================="
    echo "Revisa los resultados arriba para ver el estado de cada funcionalidad"
}

# Ejecutar funci√≥n principal
main "$@"

